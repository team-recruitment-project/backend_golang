// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend_golang/ent/position"
	"backend_golang/ent/predicate"
	"backend_golang/ent/team"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TeamUpdate is the builder for updating Team entities.
type TeamUpdate struct {
	config
	hooks    []Hook
	mutation *TeamMutation
}

// Where appends a list predicates to the TeamUpdate builder.
func (tu *TeamUpdate) Where(ps ...predicate.Team) *TeamUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TeamUpdate) SetName(s string) *TeamUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TeamUpdate) SetNillableName(s *string) *TeamUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetDescription sets the "description" field.
func (tu *TeamUpdate) SetDescription(s string) *TeamUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TeamUpdate) SetNillableDescription(s *string) *TeamUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// SetHeadcount sets the "headcount" field.
func (tu *TeamUpdate) SetHeadcount(i int8) *TeamUpdate {
	tu.mutation.ResetHeadcount()
	tu.mutation.SetHeadcount(i)
	return tu
}

// SetNillableHeadcount sets the "headcount" field if the given value is not nil.
func (tu *TeamUpdate) SetNillableHeadcount(i *int8) *TeamUpdate {
	if i != nil {
		tu.SetHeadcount(*i)
	}
	return tu
}

// AddHeadcount adds i to the "headcount" field.
func (tu *TeamUpdate) AddHeadcount(i int8) *TeamUpdate {
	tu.mutation.AddHeadcount(i)
	return tu
}

// AddPositionIDs adds the "positions" edge to the Position entity by IDs.
func (tu *TeamUpdate) AddPositionIDs(ids ...int) *TeamUpdate {
	tu.mutation.AddPositionIDs(ids...)
	return tu
}

// AddPositions adds the "positions" edges to the Position entity.
func (tu *TeamUpdate) AddPositions(p ...*Position) *TeamUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.AddPositionIDs(ids...)
}

// Mutation returns the TeamMutation object of the builder.
func (tu *TeamUpdate) Mutation() *TeamMutation {
	return tu.mutation
}

// ClearPositions clears all "positions" edges to the Position entity.
func (tu *TeamUpdate) ClearPositions() *TeamUpdate {
	tu.mutation.ClearPositions()
	return tu
}

// RemovePositionIDs removes the "positions" edge to Position entities by IDs.
func (tu *TeamUpdate) RemovePositionIDs(ids ...int) *TeamUpdate {
	tu.mutation.RemovePositionIDs(ids...)
	return tu
}

// RemovePositions removes "positions" edges to Position entities.
func (tu *TeamUpdate) RemovePositions(p ...*Position) *TeamUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tu.RemovePositionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TeamUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TeamUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TeamUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TeamUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TeamUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(team.Table, team.Columns, sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(team.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(team.FieldDescription, field.TypeString, value)
	}
	if value, ok := tu.mutation.Headcount(); ok {
		_spec.SetField(team.FieldHeadcount, field.TypeInt8, value)
	}
	if value, ok := tu.mutation.AddedHeadcount(); ok {
		_spec.AddField(team.FieldHeadcount, field.TypeInt8, value)
	}
	if tu.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.PositionsTable,
			Columns: []string{team.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedPositionsIDs(); len(nodes) > 0 && !tu.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.PositionsTable,
			Columns: []string{team.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.PositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.PositionsTable,
			Columns: []string{team.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{team.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TeamUpdateOne is the builder for updating a single Team entity.
type TeamUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TeamMutation
}

// SetName sets the "name" field.
func (tuo *TeamUpdateOne) SetName(s string) *TeamUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableName(s *string) *TeamUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TeamUpdateOne) SetDescription(s string) *TeamUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableDescription(s *string) *TeamUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// SetHeadcount sets the "headcount" field.
func (tuo *TeamUpdateOne) SetHeadcount(i int8) *TeamUpdateOne {
	tuo.mutation.ResetHeadcount()
	tuo.mutation.SetHeadcount(i)
	return tuo
}

// SetNillableHeadcount sets the "headcount" field if the given value is not nil.
func (tuo *TeamUpdateOne) SetNillableHeadcount(i *int8) *TeamUpdateOne {
	if i != nil {
		tuo.SetHeadcount(*i)
	}
	return tuo
}

// AddHeadcount adds i to the "headcount" field.
func (tuo *TeamUpdateOne) AddHeadcount(i int8) *TeamUpdateOne {
	tuo.mutation.AddHeadcount(i)
	return tuo
}

// AddPositionIDs adds the "positions" edge to the Position entity by IDs.
func (tuo *TeamUpdateOne) AddPositionIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.AddPositionIDs(ids...)
	return tuo
}

// AddPositions adds the "positions" edges to the Position entity.
func (tuo *TeamUpdateOne) AddPositions(p ...*Position) *TeamUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.AddPositionIDs(ids...)
}

// Mutation returns the TeamMutation object of the builder.
func (tuo *TeamUpdateOne) Mutation() *TeamMutation {
	return tuo.mutation
}

// ClearPositions clears all "positions" edges to the Position entity.
func (tuo *TeamUpdateOne) ClearPositions() *TeamUpdateOne {
	tuo.mutation.ClearPositions()
	return tuo
}

// RemovePositionIDs removes the "positions" edge to Position entities by IDs.
func (tuo *TeamUpdateOne) RemovePositionIDs(ids ...int) *TeamUpdateOne {
	tuo.mutation.RemovePositionIDs(ids...)
	return tuo
}

// RemovePositions removes "positions" edges to Position entities.
func (tuo *TeamUpdateOne) RemovePositions(p ...*Position) *TeamUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return tuo.RemovePositionIDs(ids...)
}

// Where appends a list predicates to the TeamUpdate builder.
func (tuo *TeamUpdateOne) Where(ps ...predicate.Team) *TeamUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TeamUpdateOne) Select(field string, fields ...string) *TeamUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Team entity.
func (tuo *TeamUpdateOne) Save(ctx context.Context) (*Team, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TeamUpdateOne) SaveX(ctx context.Context) *Team {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TeamUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TeamUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TeamUpdateOne) sqlSave(ctx context.Context) (_node *Team, err error) {
	_spec := sqlgraph.NewUpdateSpec(team.Table, team.Columns, sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Team.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, team.FieldID)
		for _, f := range fields {
			if !team.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != team.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(team.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(team.FieldDescription, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Headcount(); ok {
		_spec.SetField(team.FieldHeadcount, field.TypeInt8, value)
	}
	if value, ok := tuo.mutation.AddedHeadcount(); ok {
		_spec.AddField(team.FieldHeadcount, field.TypeInt8, value)
	}
	if tuo.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.PositionsTable,
			Columns: []string{team.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedPositionsIDs(); len(nodes) > 0 && !tuo.mutation.PositionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.PositionsTable,
			Columns: []string{team.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.PositionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   team.PositionsTable,
			Columns: []string{team.PositionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Team{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{team.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}

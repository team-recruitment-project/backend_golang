// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend_golang/ent/announcement"
	"backend_golang/ent/predicate"
	"backend_golang/ent/team"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AnnouncementUpdate is the builder for updating Announcement entities.
type AnnouncementUpdate struct {
	config
	hooks    []Hook
	mutation *AnnouncementMutation
}

// Where appends a list predicates to the AnnouncementUpdate builder.
func (au *AnnouncementUpdate) Where(ps ...predicate.Announcement) *AnnouncementUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetTitle sets the "title" field.
func (au *AnnouncementUpdate) SetTitle(s string) *AnnouncementUpdate {
	au.mutation.SetTitle(s)
	return au
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (au *AnnouncementUpdate) SetNillableTitle(s *string) *AnnouncementUpdate {
	if s != nil {
		au.SetTitle(*s)
	}
	return au
}

// SetContent sets the "content" field.
func (au *AnnouncementUpdate) SetContent(s string) *AnnouncementUpdate {
	au.mutation.SetContent(s)
	return au
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (au *AnnouncementUpdate) SetNillableContent(s *string) *AnnouncementUpdate {
	if s != nil {
		au.SetContent(*s)
	}
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AnnouncementUpdate) SetUpdatedAt(t time.Time) *AnnouncementUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (au *AnnouncementUpdate) SetTeamID(id int) *AnnouncementUpdate {
	au.mutation.SetTeamID(id)
	return au
}

// SetNillableTeamID sets the "team" edge to the Team entity by ID if the given value is not nil.
func (au *AnnouncementUpdate) SetNillableTeamID(id *int) *AnnouncementUpdate {
	if id != nil {
		au = au.SetTeamID(*id)
	}
	return au
}

// SetTeam sets the "team" edge to the Team entity.
func (au *AnnouncementUpdate) SetTeam(t *Team) *AnnouncementUpdate {
	return au.SetTeamID(t.ID)
}

// Mutation returns the AnnouncementMutation object of the builder.
func (au *AnnouncementUpdate) Mutation() *AnnouncementMutation {
	return au.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (au *AnnouncementUpdate) ClearTeam() *AnnouncementUpdate {
	au.mutation.ClearTeam()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AnnouncementUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AnnouncementUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AnnouncementUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AnnouncementUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AnnouncementUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok {
		v := announcement.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AnnouncementUpdate) check() error {
	if v, ok := au.mutation.Title(); ok {
		if err := announcement.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Announcement.title": %w`, err)}
		}
	}
	if v, ok := au.mutation.Content(); ok {
		if err := announcement.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Announcement.content": %w`, err)}
		}
	}
	return nil
}

func (au *AnnouncementUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(announcement.Table, announcement.Columns, sqlgraph.NewFieldSpec(announcement.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Title(); ok {
		_spec.SetField(announcement.FieldTitle, field.TypeString, value)
	}
	if value, ok := au.mutation.Content(); ok {
		_spec.SetField(announcement.FieldContent, field.TypeString, value)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(announcement.FieldUpdatedAt, field.TypeTime, value)
	}
	if au.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   announcement.TeamTable,
			Columns: []string{announcement.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   announcement.TeamTable,
			Columns: []string{announcement.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{announcement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AnnouncementUpdateOne is the builder for updating a single Announcement entity.
type AnnouncementUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AnnouncementMutation
}

// SetTitle sets the "title" field.
func (auo *AnnouncementUpdateOne) SetTitle(s string) *AnnouncementUpdateOne {
	auo.mutation.SetTitle(s)
	return auo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (auo *AnnouncementUpdateOne) SetNillableTitle(s *string) *AnnouncementUpdateOne {
	if s != nil {
		auo.SetTitle(*s)
	}
	return auo
}

// SetContent sets the "content" field.
func (auo *AnnouncementUpdateOne) SetContent(s string) *AnnouncementUpdateOne {
	auo.mutation.SetContent(s)
	return auo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (auo *AnnouncementUpdateOne) SetNillableContent(s *string) *AnnouncementUpdateOne {
	if s != nil {
		auo.SetContent(*s)
	}
	return auo
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AnnouncementUpdateOne) SetUpdatedAt(t time.Time) *AnnouncementUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (auo *AnnouncementUpdateOne) SetTeamID(id int) *AnnouncementUpdateOne {
	auo.mutation.SetTeamID(id)
	return auo
}

// SetNillableTeamID sets the "team" edge to the Team entity by ID if the given value is not nil.
func (auo *AnnouncementUpdateOne) SetNillableTeamID(id *int) *AnnouncementUpdateOne {
	if id != nil {
		auo = auo.SetTeamID(*id)
	}
	return auo
}

// SetTeam sets the "team" edge to the Team entity.
func (auo *AnnouncementUpdateOne) SetTeam(t *Team) *AnnouncementUpdateOne {
	return auo.SetTeamID(t.ID)
}

// Mutation returns the AnnouncementMutation object of the builder.
func (auo *AnnouncementUpdateOne) Mutation() *AnnouncementMutation {
	return auo.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (auo *AnnouncementUpdateOne) ClearTeam() *AnnouncementUpdateOne {
	auo.mutation.ClearTeam()
	return auo
}

// Where appends a list predicates to the AnnouncementUpdate builder.
func (auo *AnnouncementUpdateOne) Where(ps ...predicate.Announcement) *AnnouncementUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AnnouncementUpdateOne) Select(field string, fields ...string) *AnnouncementUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Announcement entity.
func (auo *AnnouncementUpdateOne) Save(ctx context.Context) (*Announcement, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AnnouncementUpdateOne) SaveX(ctx context.Context) *Announcement {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AnnouncementUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AnnouncementUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AnnouncementUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok {
		v := announcement.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AnnouncementUpdateOne) check() error {
	if v, ok := auo.mutation.Title(); ok {
		if err := announcement.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Announcement.title": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Content(); ok {
		if err := announcement.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "Announcement.content": %w`, err)}
		}
	}
	return nil
}

func (auo *AnnouncementUpdateOne) sqlSave(ctx context.Context) (_node *Announcement, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(announcement.Table, announcement.Columns, sqlgraph.NewFieldSpec(announcement.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Announcement.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, announcement.FieldID)
		for _, f := range fields {
			if !announcement.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != announcement.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Title(); ok {
		_spec.SetField(announcement.FieldTitle, field.TypeString, value)
	}
	if value, ok := auo.mutation.Content(); ok {
		_spec.SetField(announcement.FieldContent, field.TypeString, value)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(announcement.FieldUpdatedAt, field.TypeTime, value)
	}
	if auo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   announcement.TeamTable,
			Columns: []string{announcement.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   announcement.TeamTable,
			Columns: []string{announcement.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Announcement{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{announcement.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend_golang/ent/predicate"
	"backend_golang/ent/transientmember"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TransientMemberUpdate is the builder for updating TransientMember entities.
type TransientMemberUpdate struct {
	config
	hooks    []Hook
	mutation *TransientMemberMutation
}

// Where appends a list predicates to the TransientMemberUpdate builder.
func (tmu *TransientMemberUpdate) Where(ps ...predicate.TransientMember) *TransientMemberUpdate {
	tmu.mutation.Where(ps...)
	return tmu
}

// SetTransientMemberID sets the "transient_member_id" field.
func (tmu *TransientMemberUpdate) SetTransientMemberID(s string) *TransientMemberUpdate {
	tmu.mutation.SetTransientMemberID(s)
	return tmu
}

// SetNillableTransientMemberID sets the "transient_member_id" field if the given value is not nil.
func (tmu *TransientMemberUpdate) SetNillableTransientMemberID(s *string) *TransientMemberUpdate {
	if s != nil {
		tmu.SetTransientMemberID(*s)
	}
	return tmu
}

// SetEmail sets the "email" field.
func (tmu *TransientMemberUpdate) SetEmail(s string) *TransientMemberUpdate {
	tmu.mutation.SetEmail(s)
	return tmu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (tmu *TransientMemberUpdate) SetNillableEmail(s *string) *TransientMemberUpdate {
	if s != nil {
		tmu.SetEmail(*s)
	}
	return tmu
}

// SetPicture sets the "picture" field.
func (tmu *TransientMemberUpdate) SetPicture(s string) *TransientMemberUpdate {
	tmu.mutation.SetPicture(s)
	return tmu
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (tmu *TransientMemberUpdate) SetNillablePicture(s *string) *TransientMemberUpdate {
	if s != nil {
		tmu.SetPicture(*s)
	}
	return tmu
}

// SetNickname sets the "nickname" field.
func (tmu *TransientMemberUpdate) SetNickname(s string) *TransientMemberUpdate {
	tmu.mutation.SetNickname(s)
	return tmu
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (tmu *TransientMemberUpdate) SetNillableNickname(s *string) *TransientMemberUpdate {
	if s != nil {
		tmu.SetNickname(*s)
	}
	return tmu
}

// Mutation returns the TransientMemberMutation object of the builder.
func (tmu *TransientMemberUpdate) Mutation() *TransientMemberMutation {
	return tmu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tmu *TransientMemberUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tmu.sqlSave, tmu.mutation, tmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tmu *TransientMemberUpdate) SaveX(ctx context.Context) int {
	affected, err := tmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tmu *TransientMemberUpdate) Exec(ctx context.Context) error {
	_, err := tmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmu *TransientMemberUpdate) ExecX(ctx context.Context) {
	if err := tmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tmu *TransientMemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(transientmember.Table, transientmember.Columns, sqlgraph.NewFieldSpec(transientmember.FieldID, field.TypeInt))
	if ps := tmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmu.mutation.TransientMemberID(); ok {
		_spec.SetField(transientmember.FieldTransientMemberID, field.TypeString, value)
	}
	if value, ok := tmu.mutation.Email(); ok {
		_spec.SetField(transientmember.FieldEmail, field.TypeString, value)
	}
	if value, ok := tmu.mutation.Picture(); ok {
		_spec.SetField(transientmember.FieldPicture, field.TypeString, value)
	}
	if value, ok := tmu.mutation.Nickname(); ok {
		_spec.SetField(transientmember.FieldNickname, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transientmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tmu.mutation.done = true
	return n, nil
}

// TransientMemberUpdateOne is the builder for updating a single TransientMember entity.
type TransientMemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransientMemberMutation
}

// SetTransientMemberID sets the "transient_member_id" field.
func (tmuo *TransientMemberUpdateOne) SetTransientMemberID(s string) *TransientMemberUpdateOne {
	tmuo.mutation.SetTransientMemberID(s)
	return tmuo
}

// SetNillableTransientMemberID sets the "transient_member_id" field if the given value is not nil.
func (tmuo *TransientMemberUpdateOne) SetNillableTransientMemberID(s *string) *TransientMemberUpdateOne {
	if s != nil {
		tmuo.SetTransientMemberID(*s)
	}
	return tmuo
}

// SetEmail sets the "email" field.
func (tmuo *TransientMemberUpdateOne) SetEmail(s string) *TransientMemberUpdateOne {
	tmuo.mutation.SetEmail(s)
	return tmuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (tmuo *TransientMemberUpdateOne) SetNillableEmail(s *string) *TransientMemberUpdateOne {
	if s != nil {
		tmuo.SetEmail(*s)
	}
	return tmuo
}

// SetPicture sets the "picture" field.
func (tmuo *TransientMemberUpdateOne) SetPicture(s string) *TransientMemberUpdateOne {
	tmuo.mutation.SetPicture(s)
	return tmuo
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (tmuo *TransientMemberUpdateOne) SetNillablePicture(s *string) *TransientMemberUpdateOne {
	if s != nil {
		tmuo.SetPicture(*s)
	}
	return tmuo
}

// SetNickname sets the "nickname" field.
func (tmuo *TransientMemberUpdateOne) SetNickname(s string) *TransientMemberUpdateOne {
	tmuo.mutation.SetNickname(s)
	return tmuo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (tmuo *TransientMemberUpdateOne) SetNillableNickname(s *string) *TransientMemberUpdateOne {
	if s != nil {
		tmuo.SetNickname(*s)
	}
	return tmuo
}

// Mutation returns the TransientMemberMutation object of the builder.
func (tmuo *TransientMemberUpdateOne) Mutation() *TransientMemberMutation {
	return tmuo.mutation
}

// Where appends a list predicates to the TransientMemberUpdate builder.
func (tmuo *TransientMemberUpdateOne) Where(ps ...predicate.TransientMember) *TransientMemberUpdateOne {
	tmuo.mutation.Where(ps...)
	return tmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tmuo *TransientMemberUpdateOne) Select(field string, fields ...string) *TransientMemberUpdateOne {
	tmuo.fields = append([]string{field}, fields...)
	return tmuo
}

// Save executes the query and returns the updated TransientMember entity.
func (tmuo *TransientMemberUpdateOne) Save(ctx context.Context) (*TransientMember, error) {
	return withHooks(ctx, tmuo.sqlSave, tmuo.mutation, tmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tmuo *TransientMemberUpdateOne) SaveX(ctx context.Context) *TransientMember {
	node, err := tmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tmuo *TransientMemberUpdateOne) Exec(ctx context.Context) error {
	_, err := tmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmuo *TransientMemberUpdateOne) ExecX(ctx context.Context) {
	if err := tmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tmuo *TransientMemberUpdateOne) sqlSave(ctx context.Context) (_node *TransientMember, err error) {
	_spec := sqlgraph.NewUpdateSpec(transientmember.Table, transientmember.Columns, sqlgraph.NewFieldSpec(transientmember.FieldID, field.TypeInt))
	id, ok := tmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TransientMember.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transientmember.FieldID)
		for _, f := range fields {
			if !transientmember.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transientmember.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tmuo.mutation.TransientMemberID(); ok {
		_spec.SetField(transientmember.FieldTransientMemberID, field.TypeString, value)
	}
	if value, ok := tmuo.mutation.Email(); ok {
		_spec.SetField(transientmember.FieldEmail, field.TypeString, value)
	}
	if value, ok := tmuo.mutation.Picture(); ok {
		_spec.SetField(transientmember.FieldPicture, field.TypeString, value)
	}
	if value, ok := tmuo.mutation.Nickname(); ok {
		_spec.SetField(transientmember.FieldNickname, field.TypeString, value)
	}
	_node = &TransientMember{config: tmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transientmember.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tmuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package position

import (
	"backend_golang/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Position {
	return predicate.Position(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Position {
	return predicate.Position(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Position {
	return predicate.Position(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Position {
	return predicate.Position(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Position {
	return predicate.Position(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Position {
	return predicate.Position(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Position {
	return predicate.Position(sql.FieldLTE(FieldID, id))
}

// Role applies equality check predicate on the "role" field. It's identical to RoleEQ.
func Role(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldRole, v))
}

// Vacancy applies equality check predicate on the "vacancy" field. It's identical to VacancyEQ.
func Vacancy(v int8) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldVacancy, v))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v string) predicate.Position {
	return predicate.Position(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...string) predicate.Position {
	return predicate.Position(sql.FieldNotIn(FieldRole, vs...))
}

// RoleGT applies the GT predicate on the "role" field.
func RoleGT(v string) predicate.Position {
	return predicate.Position(sql.FieldGT(FieldRole, v))
}

// RoleGTE applies the GTE predicate on the "role" field.
func RoleGTE(v string) predicate.Position {
	return predicate.Position(sql.FieldGTE(FieldRole, v))
}

// RoleLT applies the LT predicate on the "role" field.
func RoleLT(v string) predicate.Position {
	return predicate.Position(sql.FieldLT(FieldRole, v))
}

// RoleLTE applies the LTE predicate on the "role" field.
func RoleLTE(v string) predicate.Position {
	return predicate.Position(sql.FieldLTE(FieldRole, v))
}

// RoleContains applies the Contains predicate on the "role" field.
func RoleContains(v string) predicate.Position {
	return predicate.Position(sql.FieldContains(FieldRole, v))
}

// RoleHasPrefix applies the HasPrefix predicate on the "role" field.
func RoleHasPrefix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasPrefix(FieldRole, v))
}

// RoleHasSuffix applies the HasSuffix predicate on the "role" field.
func RoleHasSuffix(v string) predicate.Position {
	return predicate.Position(sql.FieldHasSuffix(FieldRole, v))
}

// RoleEqualFold applies the EqualFold predicate on the "role" field.
func RoleEqualFold(v string) predicate.Position {
	return predicate.Position(sql.FieldEqualFold(FieldRole, v))
}

// RoleContainsFold applies the ContainsFold predicate on the "role" field.
func RoleContainsFold(v string) predicate.Position {
	return predicate.Position(sql.FieldContainsFold(FieldRole, v))
}

// VacancyEQ applies the EQ predicate on the "vacancy" field.
func VacancyEQ(v int8) predicate.Position {
	return predicate.Position(sql.FieldEQ(FieldVacancy, v))
}

// VacancyNEQ applies the NEQ predicate on the "vacancy" field.
func VacancyNEQ(v int8) predicate.Position {
	return predicate.Position(sql.FieldNEQ(FieldVacancy, v))
}

// VacancyIn applies the In predicate on the "vacancy" field.
func VacancyIn(vs ...int8) predicate.Position {
	return predicate.Position(sql.FieldIn(FieldVacancy, vs...))
}

// VacancyNotIn applies the NotIn predicate on the "vacancy" field.
func VacancyNotIn(vs ...int8) predicate.Position {
	return predicate.Position(sql.FieldNotIn(FieldVacancy, vs...))
}

// VacancyGT applies the GT predicate on the "vacancy" field.
func VacancyGT(v int8) predicate.Position {
	return predicate.Position(sql.FieldGT(FieldVacancy, v))
}

// VacancyGTE applies the GTE predicate on the "vacancy" field.
func VacancyGTE(v int8) predicate.Position {
	return predicate.Position(sql.FieldGTE(FieldVacancy, v))
}

// VacancyLT applies the LT predicate on the "vacancy" field.
func VacancyLT(v int8) predicate.Position {
	return predicate.Position(sql.FieldLT(FieldVacancy, v))
}

// VacancyLTE applies the LTE predicate on the "vacancy" field.
func VacancyLTE(v int8) predicate.Position {
	return predicate.Position(sql.FieldLTE(FieldVacancy, v))
}

// HasTeam applies the HasEdge predicate on the "team" edge.
func HasTeam() predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeamTable, TeamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamWith applies the HasEdge predicate on the "team" edge with a given conditions (other predicates).
func HasTeamWith(preds ...predicate.Team) predicate.Position {
	return predicate.Position(func(s *sql.Selector) {
		step := newTeamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Position) predicate.Position {
	return predicate.Position(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Position) predicate.Position {
	return predicate.Position(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Position) predicate.Position {
	return predicate.Position(sql.NotPredicates(p))
}

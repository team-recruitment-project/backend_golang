// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend_golang/ent/transientmember"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// TransientMember is the model entity for the TransientMember schema.
type TransientMember struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// TransientMemberID holds the value of the "transient_member_id" field.
	TransientMemberID string `json:"transient_member_id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Picture holds the value of the "picture" field.
	Picture string `json:"picture,omitempty"`
	// Nickname holds the value of the "nickname" field.
	Nickname     string `json:"nickname,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TransientMember) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case transientmember.FieldID:
			values[i] = new(sql.NullInt64)
		case transientmember.FieldTransientMemberID, transientmember.FieldEmail, transientmember.FieldPicture, transientmember.FieldNickname:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TransientMember fields.
func (tm *TransientMember) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transientmember.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tm.ID = int(value.Int64)
		case transientmember.FieldTransientMemberID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transient_member_id", values[i])
			} else if value.Valid {
				tm.TransientMemberID = value.String
			}
		case transientmember.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				tm.Email = value.String
			}
		case transientmember.FieldPicture:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field picture", values[i])
			} else if value.Valid {
				tm.Picture = value.String
			}
		case transientmember.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				tm.Nickname = value.String
			}
		default:
			tm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TransientMember.
// This includes values selected through modifiers, order, etc.
func (tm *TransientMember) Value(name string) (ent.Value, error) {
	return tm.selectValues.Get(name)
}

// Update returns a builder for updating this TransientMember.
// Note that you need to call TransientMember.Unwrap() before calling this method if this TransientMember
// was returned from a transaction, and the transaction was committed or rolled back.
func (tm *TransientMember) Update() *TransientMemberUpdateOne {
	return NewTransientMemberClient(tm.config).UpdateOne(tm)
}

// Unwrap unwraps the TransientMember entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tm *TransientMember) Unwrap() *TransientMember {
	_tx, ok := tm.config.driver.(*txDriver)
	if !ok {
		panic("ent: TransientMember is not a transactional entity")
	}
	tm.config.driver = _tx.drv
	return tm
}

// String implements the fmt.Stringer.
func (tm *TransientMember) String() string {
	var builder strings.Builder
	builder.WriteString("TransientMember(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tm.ID))
	builder.WriteString("transient_member_id=")
	builder.WriteString(tm.TransientMemberID)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(tm.Email)
	builder.WriteString(", ")
	builder.WriteString("picture=")
	builder.WriteString(tm.Picture)
	builder.WriteString(", ")
	builder.WriteString("nickname=")
	builder.WriteString(tm.Nickname)
	builder.WriteByte(')')
	return builder.String()
}

// TransientMembers is a parsable slice of TransientMember.
type TransientMembers []*TransientMember

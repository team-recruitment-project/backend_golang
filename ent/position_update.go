// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend_golang/ent/position"
	"backend_golang/ent/predicate"
	"backend_golang/ent/team"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PositionUpdate is the builder for updating Position entities.
type PositionUpdate struct {
	config
	hooks    []Hook
	mutation *PositionMutation
}

// Where appends a list predicates to the PositionUpdate builder.
func (pu *PositionUpdate) Where(ps ...predicate.Position) *PositionUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetRole sets the "role" field.
func (pu *PositionUpdate) SetRole(s string) *PositionUpdate {
	pu.mutation.SetRole(s)
	return pu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (pu *PositionUpdate) SetNillableRole(s *string) *PositionUpdate {
	if s != nil {
		pu.SetRole(*s)
	}
	return pu
}

// SetVacancy sets the "vacancy" field.
func (pu *PositionUpdate) SetVacancy(i int8) *PositionUpdate {
	pu.mutation.ResetVacancy()
	pu.mutation.SetVacancy(i)
	return pu
}

// SetNillableVacancy sets the "vacancy" field if the given value is not nil.
func (pu *PositionUpdate) SetNillableVacancy(i *int8) *PositionUpdate {
	if i != nil {
		pu.SetVacancy(*i)
	}
	return pu
}

// AddVacancy adds i to the "vacancy" field.
func (pu *PositionUpdate) AddVacancy(i int8) *PositionUpdate {
	pu.mutation.AddVacancy(i)
	return pu
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (pu *PositionUpdate) SetTeamID(id int) *PositionUpdate {
	pu.mutation.SetTeamID(id)
	return pu
}

// SetNillableTeamID sets the "team" edge to the Team entity by ID if the given value is not nil.
func (pu *PositionUpdate) SetNillableTeamID(id *int) *PositionUpdate {
	if id != nil {
		pu = pu.SetTeamID(*id)
	}
	return pu
}

// SetTeam sets the "team" edge to the Team entity.
func (pu *PositionUpdate) SetTeam(t *Team) *PositionUpdate {
	return pu.SetTeamID(t.ID)
}

// Mutation returns the PositionMutation object of the builder.
func (pu *PositionUpdate) Mutation() *PositionMutation {
	return pu.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (pu *PositionUpdate) ClearTeam() *PositionUpdate {
	pu.mutation.ClearTeam()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PositionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PositionUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PositionUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PositionUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PositionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(position.Table, position.Columns, sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Role(); ok {
		_spec.SetField(position.FieldRole, field.TypeString, value)
	}
	if value, ok := pu.mutation.Vacancy(); ok {
		_spec.SetField(position.FieldVacancy, field.TypeInt8, value)
	}
	if value, ok := pu.mutation.AddedVacancy(); ok {
		_spec.AddField(position.FieldVacancy, field.TypeInt8, value)
	}
	if pu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   position.TeamTable,
			Columns: []string{position.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   position.TeamTable,
			Columns: []string{position.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{position.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PositionUpdateOne is the builder for updating a single Position entity.
type PositionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PositionMutation
}

// SetRole sets the "role" field.
func (puo *PositionUpdateOne) SetRole(s string) *PositionUpdateOne {
	puo.mutation.SetRole(s)
	return puo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillableRole(s *string) *PositionUpdateOne {
	if s != nil {
		puo.SetRole(*s)
	}
	return puo
}

// SetVacancy sets the "vacancy" field.
func (puo *PositionUpdateOne) SetVacancy(i int8) *PositionUpdateOne {
	puo.mutation.ResetVacancy()
	puo.mutation.SetVacancy(i)
	return puo
}

// SetNillableVacancy sets the "vacancy" field if the given value is not nil.
func (puo *PositionUpdateOne) SetNillableVacancy(i *int8) *PositionUpdateOne {
	if i != nil {
		puo.SetVacancy(*i)
	}
	return puo
}

// AddVacancy adds i to the "vacancy" field.
func (puo *PositionUpdateOne) AddVacancy(i int8) *PositionUpdateOne {
	puo.mutation.AddVacancy(i)
	return puo
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (puo *PositionUpdateOne) SetTeamID(id int) *PositionUpdateOne {
	puo.mutation.SetTeamID(id)
	return puo
}

// SetNillableTeamID sets the "team" edge to the Team entity by ID if the given value is not nil.
func (puo *PositionUpdateOne) SetNillableTeamID(id *int) *PositionUpdateOne {
	if id != nil {
		puo = puo.SetTeamID(*id)
	}
	return puo
}

// SetTeam sets the "team" edge to the Team entity.
func (puo *PositionUpdateOne) SetTeam(t *Team) *PositionUpdateOne {
	return puo.SetTeamID(t.ID)
}

// Mutation returns the PositionMutation object of the builder.
func (puo *PositionUpdateOne) Mutation() *PositionMutation {
	return puo.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (puo *PositionUpdateOne) ClearTeam() *PositionUpdateOne {
	puo.mutation.ClearTeam()
	return puo
}

// Where appends a list predicates to the PositionUpdate builder.
func (puo *PositionUpdateOne) Where(ps ...predicate.Position) *PositionUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PositionUpdateOne) Select(field string, fields ...string) *PositionUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Position entity.
func (puo *PositionUpdateOne) Save(ctx context.Context) (*Position, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PositionUpdateOne) SaveX(ctx context.Context) *Position {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PositionUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PositionUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PositionUpdateOne) sqlSave(ctx context.Context) (_node *Position, err error) {
	_spec := sqlgraph.NewUpdateSpec(position.Table, position.Columns, sqlgraph.NewFieldSpec(position.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Position.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, position.FieldID)
		for _, f := range fields {
			if !position.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != position.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Role(); ok {
		_spec.SetField(position.FieldRole, field.TypeString, value)
	}
	if value, ok := puo.mutation.Vacancy(); ok {
		_spec.SetField(position.FieldVacancy, field.TypeInt8, value)
	}
	if value, ok := puo.mutation.AddedVacancy(); ok {
		_spec.AddField(position.FieldVacancy, field.TypeInt8, value)
	}
	if puo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   position.TeamTable,
			Columns: []string{position.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   position.TeamTable,
			Columns: []string{position.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Position{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{position.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}

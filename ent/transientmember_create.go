// Code generated by ent, DO NOT EDIT.

package ent

import (
	"backend_golang/ent/transientmember"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TransientMemberCreate is the builder for creating a TransientMember entity.
type TransientMemberCreate struct {
	config
	mutation *TransientMemberMutation
	hooks    []Hook
}

// SetTransientMemberID sets the "transient_member_id" field.
func (tmc *TransientMemberCreate) SetTransientMemberID(s string) *TransientMemberCreate {
	tmc.mutation.SetTransientMemberID(s)
	return tmc
}

// SetEmail sets the "email" field.
func (tmc *TransientMemberCreate) SetEmail(s string) *TransientMemberCreate {
	tmc.mutation.SetEmail(s)
	return tmc
}

// SetPicture sets the "picture" field.
func (tmc *TransientMemberCreate) SetPicture(s string) *TransientMemberCreate {
	tmc.mutation.SetPicture(s)
	return tmc
}

// SetNickname sets the "nickname" field.
func (tmc *TransientMemberCreate) SetNickname(s string) *TransientMemberCreate {
	tmc.mutation.SetNickname(s)
	return tmc
}

// Mutation returns the TransientMemberMutation object of the builder.
func (tmc *TransientMemberCreate) Mutation() *TransientMemberMutation {
	return tmc.mutation
}

// Save creates the TransientMember in the database.
func (tmc *TransientMemberCreate) Save(ctx context.Context) (*TransientMember, error) {
	return withHooks(ctx, tmc.sqlSave, tmc.mutation, tmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tmc *TransientMemberCreate) SaveX(ctx context.Context) *TransientMember {
	v, err := tmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmc *TransientMemberCreate) Exec(ctx context.Context) error {
	_, err := tmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmc *TransientMemberCreate) ExecX(ctx context.Context) {
	if err := tmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tmc *TransientMemberCreate) check() error {
	if _, ok := tmc.mutation.TransientMemberID(); !ok {
		return &ValidationError{Name: "transient_member_id", err: errors.New(`ent: missing required field "TransientMember.transient_member_id"`)}
	}
	if _, ok := tmc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "TransientMember.email"`)}
	}
	if _, ok := tmc.mutation.Picture(); !ok {
		return &ValidationError{Name: "picture", err: errors.New(`ent: missing required field "TransientMember.picture"`)}
	}
	if _, ok := tmc.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New(`ent: missing required field "TransientMember.nickname"`)}
	}
	return nil
}

func (tmc *TransientMemberCreate) sqlSave(ctx context.Context) (*TransientMember, error) {
	if err := tmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tmc.mutation.id = &_node.ID
	tmc.mutation.done = true
	return _node, nil
}

func (tmc *TransientMemberCreate) createSpec() (*TransientMember, *sqlgraph.CreateSpec) {
	var (
		_node = &TransientMember{config: tmc.config}
		_spec = sqlgraph.NewCreateSpec(transientmember.Table, sqlgraph.NewFieldSpec(transientmember.FieldID, field.TypeInt))
	)
	if value, ok := tmc.mutation.TransientMemberID(); ok {
		_spec.SetField(transientmember.FieldTransientMemberID, field.TypeString, value)
		_node.TransientMemberID = value
	}
	if value, ok := tmc.mutation.Email(); ok {
		_spec.SetField(transientmember.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := tmc.mutation.Picture(); ok {
		_spec.SetField(transientmember.FieldPicture, field.TypeString, value)
		_node.Picture = value
	}
	if value, ok := tmc.mutation.Nickname(); ok {
		_spec.SetField(transientmember.FieldNickname, field.TypeString, value)
		_node.Nickname = value
	}
	return _node, _spec
}

// TransientMemberCreateBulk is the builder for creating many TransientMember entities in bulk.
type TransientMemberCreateBulk struct {
	config
	err      error
	builders []*TransientMemberCreate
}

// Save creates the TransientMember entities in the database.
func (tmcb *TransientMemberCreateBulk) Save(ctx context.Context) ([]*TransientMember, error) {
	if tmcb.err != nil {
		return nil, tmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tmcb.builders))
	nodes := make([]*TransientMember, len(tmcb.builders))
	mutators := make([]Mutator, len(tmcb.builders))
	for i := range tmcb.builders {
		func(i int, root context.Context) {
			builder := tmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TransientMemberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tmcb *TransientMemberCreateBulk) SaveX(ctx context.Context) []*TransientMember {
	v, err := tmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tmcb *TransientMemberCreateBulk) Exec(ctx context.Context) error {
	_, err := tmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tmcb *TransientMemberCreateBulk) ExecX(ctx context.Context) {
	if err := tmcb.Exec(ctx); err != nil {
		panic(err)
	}
}

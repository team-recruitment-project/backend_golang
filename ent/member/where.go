// Code generated by ent, DO NOT EDIT.

package member

import (
	"backend_golang/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldID, id))
}

// MemberID applies equality check predicate on the "member_id" field. It's identical to MemberIDEQ.
func MemberID(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldMemberID, v))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldEmail, v))
}

// Picture applies equality check predicate on the "picture" field. It's identical to PictureEQ.
func Picture(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldPicture, v))
}

// Nickname applies equality check predicate on the "nickname" field. It's identical to NicknameEQ.
func Nickname(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldNickname, v))
}

// Bio applies equality check predicate on the "bio" field. It's identical to BioEQ.
func Bio(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldBio, v))
}

// PreferredRole applies equality check predicate on the "preferred_role" field. It's identical to PreferredRoleEQ.
func PreferredRole(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldPreferredRole, v))
}

// MemberIDEQ applies the EQ predicate on the "member_id" field.
func MemberIDEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldMemberID, v))
}

// MemberIDNEQ applies the NEQ predicate on the "member_id" field.
func MemberIDNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldMemberID, v))
}

// MemberIDIn applies the In predicate on the "member_id" field.
func MemberIDIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldMemberID, vs...))
}

// MemberIDNotIn applies the NotIn predicate on the "member_id" field.
func MemberIDNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldMemberID, vs...))
}

// MemberIDGT applies the GT predicate on the "member_id" field.
func MemberIDGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldMemberID, v))
}

// MemberIDGTE applies the GTE predicate on the "member_id" field.
func MemberIDGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldMemberID, v))
}

// MemberIDLT applies the LT predicate on the "member_id" field.
func MemberIDLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldMemberID, v))
}

// MemberIDLTE applies the LTE predicate on the "member_id" field.
func MemberIDLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldMemberID, v))
}

// MemberIDContains applies the Contains predicate on the "member_id" field.
func MemberIDContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldMemberID, v))
}

// MemberIDHasPrefix applies the HasPrefix predicate on the "member_id" field.
func MemberIDHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldMemberID, v))
}

// MemberIDHasSuffix applies the HasSuffix predicate on the "member_id" field.
func MemberIDHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldMemberID, v))
}

// MemberIDEqualFold applies the EqualFold predicate on the "member_id" field.
func MemberIDEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldMemberID, v))
}

// MemberIDContainsFold applies the ContainsFold predicate on the "member_id" field.
func MemberIDContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldMemberID, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldEmail, v))
}

// PictureEQ applies the EQ predicate on the "picture" field.
func PictureEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldPicture, v))
}

// PictureNEQ applies the NEQ predicate on the "picture" field.
func PictureNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldPicture, v))
}

// PictureIn applies the In predicate on the "picture" field.
func PictureIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldPicture, vs...))
}

// PictureNotIn applies the NotIn predicate on the "picture" field.
func PictureNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldPicture, vs...))
}

// PictureGT applies the GT predicate on the "picture" field.
func PictureGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldPicture, v))
}

// PictureGTE applies the GTE predicate on the "picture" field.
func PictureGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldPicture, v))
}

// PictureLT applies the LT predicate on the "picture" field.
func PictureLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldPicture, v))
}

// PictureLTE applies the LTE predicate on the "picture" field.
func PictureLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldPicture, v))
}

// PictureContains applies the Contains predicate on the "picture" field.
func PictureContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldPicture, v))
}

// PictureHasPrefix applies the HasPrefix predicate on the "picture" field.
func PictureHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldPicture, v))
}

// PictureHasSuffix applies the HasSuffix predicate on the "picture" field.
func PictureHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldPicture, v))
}

// PictureEqualFold applies the EqualFold predicate on the "picture" field.
func PictureEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldPicture, v))
}

// PictureContainsFold applies the ContainsFold predicate on the "picture" field.
func PictureContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldPicture, v))
}

// NicknameEQ applies the EQ predicate on the "nickname" field.
func NicknameEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldNickname, v))
}

// NicknameNEQ applies the NEQ predicate on the "nickname" field.
func NicknameNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldNickname, v))
}

// NicknameIn applies the In predicate on the "nickname" field.
func NicknameIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldNickname, vs...))
}

// NicknameNotIn applies the NotIn predicate on the "nickname" field.
func NicknameNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldNickname, vs...))
}

// NicknameGT applies the GT predicate on the "nickname" field.
func NicknameGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldNickname, v))
}

// NicknameGTE applies the GTE predicate on the "nickname" field.
func NicknameGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldNickname, v))
}

// NicknameLT applies the LT predicate on the "nickname" field.
func NicknameLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldNickname, v))
}

// NicknameLTE applies the LTE predicate on the "nickname" field.
func NicknameLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldNickname, v))
}

// NicknameContains applies the Contains predicate on the "nickname" field.
func NicknameContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldNickname, v))
}

// NicknameHasPrefix applies the HasPrefix predicate on the "nickname" field.
func NicknameHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldNickname, v))
}

// NicknameHasSuffix applies the HasSuffix predicate on the "nickname" field.
func NicknameHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldNickname, v))
}

// NicknameEqualFold applies the EqualFold predicate on the "nickname" field.
func NicknameEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldNickname, v))
}

// NicknameContainsFold applies the ContainsFold predicate on the "nickname" field.
func NicknameContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldNickname, v))
}

// BioEQ applies the EQ predicate on the "bio" field.
func BioEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldBio, v))
}

// BioNEQ applies the NEQ predicate on the "bio" field.
func BioNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldBio, v))
}

// BioIn applies the In predicate on the "bio" field.
func BioIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldBio, vs...))
}

// BioNotIn applies the NotIn predicate on the "bio" field.
func BioNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldBio, vs...))
}

// BioGT applies the GT predicate on the "bio" field.
func BioGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldBio, v))
}

// BioGTE applies the GTE predicate on the "bio" field.
func BioGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldBio, v))
}

// BioLT applies the LT predicate on the "bio" field.
func BioLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldBio, v))
}

// BioLTE applies the LTE predicate on the "bio" field.
func BioLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldBio, v))
}

// BioContains applies the Contains predicate on the "bio" field.
func BioContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldBio, v))
}

// BioHasPrefix applies the HasPrefix predicate on the "bio" field.
func BioHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldBio, v))
}

// BioHasSuffix applies the HasSuffix predicate on the "bio" field.
func BioHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldBio, v))
}

// BioEqualFold applies the EqualFold predicate on the "bio" field.
func BioEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldBio, v))
}

// BioContainsFold applies the ContainsFold predicate on the "bio" field.
func BioContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldBio, v))
}

// PreferredRoleEQ applies the EQ predicate on the "preferred_role" field.
func PreferredRoleEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldEQ(FieldPreferredRole, v))
}

// PreferredRoleNEQ applies the NEQ predicate on the "preferred_role" field.
func PreferredRoleNEQ(v string) predicate.Member {
	return predicate.Member(sql.FieldNEQ(FieldPreferredRole, v))
}

// PreferredRoleIn applies the In predicate on the "preferred_role" field.
func PreferredRoleIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldIn(FieldPreferredRole, vs...))
}

// PreferredRoleNotIn applies the NotIn predicate on the "preferred_role" field.
func PreferredRoleNotIn(vs ...string) predicate.Member {
	return predicate.Member(sql.FieldNotIn(FieldPreferredRole, vs...))
}

// PreferredRoleGT applies the GT predicate on the "preferred_role" field.
func PreferredRoleGT(v string) predicate.Member {
	return predicate.Member(sql.FieldGT(FieldPreferredRole, v))
}

// PreferredRoleGTE applies the GTE predicate on the "preferred_role" field.
func PreferredRoleGTE(v string) predicate.Member {
	return predicate.Member(sql.FieldGTE(FieldPreferredRole, v))
}

// PreferredRoleLT applies the LT predicate on the "preferred_role" field.
func PreferredRoleLT(v string) predicate.Member {
	return predicate.Member(sql.FieldLT(FieldPreferredRole, v))
}

// PreferredRoleLTE applies the LTE predicate on the "preferred_role" field.
func PreferredRoleLTE(v string) predicate.Member {
	return predicate.Member(sql.FieldLTE(FieldPreferredRole, v))
}

// PreferredRoleContains applies the Contains predicate on the "preferred_role" field.
func PreferredRoleContains(v string) predicate.Member {
	return predicate.Member(sql.FieldContains(FieldPreferredRole, v))
}

// PreferredRoleHasPrefix applies the HasPrefix predicate on the "preferred_role" field.
func PreferredRoleHasPrefix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasPrefix(FieldPreferredRole, v))
}

// PreferredRoleHasSuffix applies the HasSuffix predicate on the "preferred_role" field.
func PreferredRoleHasSuffix(v string) predicate.Member {
	return predicate.Member(sql.FieldHasSuffix(FieldPreferredRole, v))
}

// PreferredRoleEqualFold applies the EqualFold predicate on the "preferred_role" field.
func PreferredRoleEqualFold(v string) predicate.Member {
	return predicate.Member(sql.FieldEqualFold(FieldPreferredRole, v))
}

// PreferredRoleContainsFold applies the ContainsFold predicate on the "preferred_role" field.
func PreferredRoleContainsFold(v string) predicate.Member {
	return predicate.Member(sql.FieldContainsFold(FieldPreferredRole, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Member) predicate.Member {
	return predicate.Member(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Member) predicate.Member {
	return predicate.Member(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Member) predicate.Member {
	return predicate.Member(sql.NotPredicates(p))
}
